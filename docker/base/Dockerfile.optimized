# 高度优化的多阶段Dockerfile
# 专门为在线闹钟项目优化的构建流程

# 阶段1: 依赖安装 - 使用更小的基础镜像
FROM node:18-alpine AS dependencies
WORKDIR /app

# 只复制依赖相关文件，利用Docker缓存
COPY package*.json ./
COPY tsconfig*.json ./

# 安装依赖 - 分离生产和开发依赖
RUN apk add --no-cache --virtual .build-deps \
    python3 \
    make \
    g++ && \
    npm ci --only=production && \
    npm cache clean --force && \
    apk del .build-deps

# 阶段2: 构建阶段
FROM node:18-alpine AS builder
WORKDIR /app

# 从依赖阶段复制node_modules
COPY --from=dependencies /app/node_modules ./node_modules
COPY --from=dependencies /app/package*.json ./

# 安装开发依赖用于构建
RUN npm ci --only=development

# 复制源代码
COPY . .

# 构建应用
ENV NODE_ENV=production
RUN npm run build

# 验证构建产物
RUN ls -la dist/ && \
    du -sh dist/*

# 阶段3: 运行时镜像 - 使用最小的nginx镜像
FROM nginx:alpine AS runtime

# 安装必要工具
RUN apk add --no-cache curl

# 创建非root用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -S -D -H -u 1001 -h /usr/share/nginx/html -s /sbin/nologin -G appgroup -g appgroup appuser

# 复制优化的nginx配置
COPY nginx.conf /etc/nginx/nginx.conf

# 从构建阶段复制静态文件
COPY --from=builder --chown=appuser:appgroup /app/dist /usr/share/nginx/html

# 设置正确的权限
RUN chown -R appuser:appgroup /usr/share/nginx/html && \
    chown -R appuser:appgroup /var/cache/nginx && \
    chown -R appuser:appgroup /var/log/nginx && \
    chown -R appuser:appgroup /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R appuser:appgroup /var/run/nginx.pid

# 健康检查
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

# 暴露端口
EXPOSE 80

# 切换到非root用户
USER appuser

# 启动命令
CMD ["nginx", "-g", "daemon off;"]

# 镜像标签
LABEL maintainer="Online Time Team"
LABEL version="1.0.0"
LABEL description="Online Time Clock Application - Production Ready"