# HAProxy高性能配置
global
    # 性能优化
    maxconn 4096
    nbproc 1
    nbthread 4
    cpu-map auto:1/1-4 0-3
    
    # 日志
    log stdout local0
    log-tag haproxy
    
    # 安全
    chroot /var/lib/haproxy
    user haproxy
    group haproxy
    
    # SSL/TLS优化
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:ECDHE+AES128:!PSK:!DHE:!RSA:!DSS:!aNull:!MD5
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    
    # 缓冲区优化
    tune.bufsize 32768
    tune.maxrewrite 1024
    tune.http.maxhdr 101
    
    # 压缩优化
    tune.comp.maxlevel 9
    
    # 连接优化
    tune.idle-timer 1000

defaults
    mode http
    log global
    
    # 超时设置
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    timeout http-request 10s
    timeout http-keep-alive 30s
    timeout check 10s
    timeout queue 30s
    
    # 性能选项
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    option abortonclose
    
    # 健康检查
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    
    # 压缩
    compression algo gzip
    compression type text/html text/plain text/css text/javascript application/javascript application/json application/xml
    
    # 错误文件
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http
    
    # 统计信息
    stats enable
    stats uri /haproxy-stats
    stats refresh 30s
    stats show-legends
    stats show-node

# 监听统计页面
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /
    stats refresh 10s
    stats show-legends
    stats show-desc "Online Time Load Balancer Statistics"
    stats auth admin:admin

# 前端配置 - HTTP
frontend http_front
    bind *:80
    mode http
    
    # 请求速率限制
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    
    # 访问控制列表
    acl is_static path_end .jpg .jpeg .png .gif .ico .svg .css .js .woff .woff2 .ttf .eot
    acl is_api path_beg /api/
    acl is_health path /health
    acl is_websocket hdr(Upgrade) -i WebSocket
    
    # 请求头优化
    http-request set-header X-Forwarded-Proto http
    http-request set-header X-Real-IP %[src]
    http-request del-header Proxy
    
    # 响应头安全
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy strict-origin-when-cross-origin
    http-response del-header Server
    
    # 路由规则
    use_backend health_backend if is_health
    use_backend static_backend if is_static
    use_backend api_backend if is_api
    use_backend websocket_backend if is_websocket
    default_backend app_backend

# 前端配置 - HTTPS（需要证书）
frontend https_front
    bind *:443 ssl crt /etc/haproxy/certs/site.pem alpn h2,http/1.1
    mode http
    
    # HTTP/2设置
    http-request set-header X-Forwarded-Proto https
    
    # HSTS
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    
    # 使用相同的ACL和路由规则
    acl is_static path_end .jpg .jpeg .png .gif .ico .svg .css .js .woff .woff2 .ttf .eot
    acl is_api path_beg /api/
    acl is_health path /health
    acl is_websocket hdr(Upgrade) -i WebSocket
    
    use_backend health_backend if is_health
    use_backend static_backend if is_static
    use_backend api_backend if is_api
    use_backend websocket_backend if is_websocket
    default_backend app_backend

# 后端配置 - 应用服务器
backend app_backend
    mode http
    balance leastconn
    
    # 会话保持
    cookie SERVERID insert indirect nocache
    
    # 健康检查
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    
    # 重试策略
    retries 3
    option redispatch
    
    # 服务器配置
    server app1 app:80 check cookie app1 weight 100 maxconn 100
    # 可以添加更多服务器实现负载均衡
    # server app2 app2:80 check cookie app2 weight 100 maxconn 100
    # server app3 app3:80 check cookie app3 weight 100 maxconn 100
    
    # 慢启动
    # server app1 app:80 check cookie app1 weight 100 maxconn 100 slowstart 30s

# 后端配置 - 静态资源
backend static_backend
    mode http
    balance roundrobin
    
    # 缓存头
    http-response set-header Cache-Control "public, max-age=31536000, immutable"
    http-response set-header Vary Accept-Encoding
    
    # 服务器配置
    server static1 app:80 check maxconn 200
    
    # CDN配置（如果有）
    # server cdn1 cdn.example.com:80 check maxconn 500

# 后端配置 - API
backend api_backend
    mode http
    balance roundrobin
    
    # API专用设置
    option forwardfor
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    
    # 超时设置
    timeout server 60s
    
    # 服务器配置
    server api1 app:80 check maxconn 50

# 后端配置 - WebSocket
backend websocket_backend
    mode http
    balance roundrobin
    
    # WebSocket设置
    timeout tunnel 3600s
    option http-server-close
    option forceclose
    
    # 服务器配置
    server ws1 app:80 check maxconn 50

# 后端配置 - 健康检查
backend health_backend
    mode http
    
    # 直接返回200
    http-request return status 200 content-type text/plain string "OK\n"

# 缓存配置
cache web_cache
    total-max-size 100   # MB
    max-age 3600        # 秒
    max-object-size 1048576  # 字节

# HTTP缓存规则
http-request cache-use web_cache if { path_end .jpg .jpeg .png .gif .css .js }
http-response cache-store web_cache if { path_end .jpg .jpeg .png .gif .css .js }

# 监控配置
program dataplane-api
    command /usr/local/bin/dataplaneapi --host 0.0.0.0 --port 5555 --haproxy-bin /usr/local/sbin/haproxy --config-file /usr/local/etc/haproxy/haproxy.cfg --reload-cmd "kill -SIGUSR2 1" --reload-delay 5
    no option start-on-reload