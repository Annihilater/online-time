# ===== 构建阶段 1: 依赖安装 =====
FROM node:18-alpine AS deps
WORKDIR /app

# 安装构建工具
RUN apk add --no-cache libc6-compat python3 make g++

# 复制依赖文件
COPY package*.json ./

# 安装生产依赖
RUN npm ci --only=production --silent && \
    npm cache clean --force

# ===== 构建阶段 2: 构建器 =====
FROM node:18-alpine AS builder
WORKDIR /app

# 复制依赖
COPY --from=deps /app/node_modules ./node_modules
COPY package*.json ./

# 安装所有依赖（包括开发依赖）
RUN npm ci --silent

# 复制源代码
COPY . .

# 设置环境变量优化构建
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=2048"

# 构建应用
RUN npm run build && \
    # 清理不需要的文件
    rm -rf src tests *.config.* tsconfig.* .eslintrc .prettierrc && \
    # 只保留生产依赖
    npm prune --production

# ===== 构建阶段 3: 优化静态资源 =====
FROM node:18-alpine AS optimizer
WORKDIR /app

# 安装图片优化工具
RUN apk add --no-cache \
    optipng \
    pngquant \
    jpegoptim \
    gifsicle

# 复制构建产物
COPY --from=builder /app/dist ./dist

# 优化图片
RUN find dist -name "*.png" -exec optipng -o7 {} \; && \
    find dist -name "*.jpg" -o -name "*.jpeg" -exec jpegoptim --strip-all {} \; && \
    find dist -name "*.gif" -exec gifsicle --optimize=3 -o {} {} \;

# ===== 生产阶段: Nginx =====
FROM nginx:alpine AS production

# 安装必要工具
RUN apk add --no-cache \
    curl \
    brotli \
    nginx-mod-http-brotli \
    nginx-mod-http-headers-more

# 创建缓存目录
RUN mkdir -p /var/cache/nginx/client_temp \
    /var/cache/nginx/proxy_temp \
    /var/cache/nginx/fastcgi_temp \
    /var/cache/nginx/uwsgi_temp \
    /var/cache/nginx/scgi_temp

# 复制优化后的Nginx配置
COPY performance/nginx-performance.conf /etc/nginx/nginx.conf

# 复制优化后的静态文件
COPY --from=optimizer /app/dist /usr/share/nginx/html

# 预压缩静态资源
RUN find /usr/share/nginx/html -type f \( -name "*.js" -o -name "*.css" -o -name "*.html" -o -name "*.json" -o -name "*.svg" \) \
    -exec gzip -9 -k {} \; \
    -exec brotli -9 -k {} \;

# 设置权限
RUN chown -R nginx:nginx /usr/share/nginx/html \
    /var/cache/nginx \
    /var/log/nginx \
    /etc/nginx/conf.d && \
    chmod -R 755 /usr/share/nginx/html

# 创建健康检查脚本
RUN echo '#!/bin/sh' > /healthcheck.sh && \
    echo 'curl -f http://localhost/health || exit 1' >> /healthcheck.sh && \
    chmod +x /healthcheck.sh

# 暴露端口
EXPOSE 80 443

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD /healthcheck.sh

# 以非root用户运行
USER nginx

# 启动Nginx
CMD ["nginx", "-g", "daemon off;"]