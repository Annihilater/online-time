version: '3.8'

services:
  # 安全强化的在线时间应用
  online-time-app:
    build:
      context: .
      dockerfile: security/Dockerfile.secure
      target: production
    image: online-time:secure
    container_name: online-time-app-secure
    restart: unless-stopped
    
    # 网络配置
    ports:
      - "127.0.0.1:8080:8080"  # 仅本地访问
    networks:
      - secure-network
    
    # 安全约束
    security_opt:
      - no-new-privileges:true
      - apparmor:docker-default
      - seccomp:unconfined
    
    # 资源限制
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
    
    # 只读文件系统
    read_only: true
    
    # 临时文件系统
    tmpfs:
      - /tmp:noexec,nosuid,size=100M
      - /run/nginx:noexec,nosuid,size=10M
      - /var/cache/nginx:noexec,nosuid,size=100M
      - /var/log/nginx:noexec,nosuid,size=50M
    
    # 环境变量
    environment:
      - NODE_ENV=production
      - NGINX_WORKER_PROCESSES=auto
      - SECURITY_HEADERS=enabled
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    # 容器能力限制
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
      - SETUID
      - SETGID
    
    # 日志配置
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service=online-time,security=enabled"
    
    # 标签
    labels:
      - "security.scan=enabled"
      - "security.baseline=cis-docker-1.6.0"
      - "app.version=${APP_VERSION:-latest}"

  # WAF (Web应用防火墙) - ModSecurity
  waf:
    image: owasp/modsecurity-crs:nginx-alpine
    container_name: online-time-waf
    restart: unless-stopped
    
    ports:
      - "443:443"
      - "80:80"
    
    networks:
      - secure-network
      - dmz-network
    
    volumes:
      - ./security/modsecurity/modsecurity.conf:/etc/nginx/modsecurity.d/modsecurity.conf:ro
      - ./security/modsecurity/crs-setup.conf:/etc/nginx/modsecurity.d/crs-setup.conf:ro
      - ./security/ssl:/etc/nginx/ssl:ro
      - waf-logs:/var/log/nginx
    
    environment:
      - PARANOIA=2
      - ANOMALY_INBOUND=10
      - ANOMALY_OUTBOUND=5
      - BACKEND=http://online-time-app:8080
    
    security_opt:
      - no-new-privileges:true
    
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
      - CHOWN
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    
    depends_on:
      - online-time-app
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  # 安全扫描器 - Trivy
  vulnerability-scanner:
    image: aquasec/trivy:latest
    container_name: online-time-scanner
    restart: "no"
    
    networks:
      - secure-network
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security/scan-results:/results
      - trivy-cache:/root/.cache
    
    command: >
      image
      --severity HIGH,CRITICAL
      --format json
      --output /results/scan-report.json
      online-time:secure
    
    profiles:
      - security-scan

  # 秘钥管理 - Vault
  vault:
    image: vault:latest
    container_name: online-time-vault
    restart: unless-stopped
    
    ports:
      - "127.0.0.1:8200:8200"
    
    networks:
      - secure-network
    
    volumes:
      - vault-data:/vault/data
      - ./security/vault:/vault/config:ro
    
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
    
    cap_add:
      - IPC_LOCK
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    
    profiles:
      - secrets

  # 日志收集和分析 - Falco
  falco:
    image: falcosecurity/falco:latest
    container_name: online-time-falco
    restart: unless-stopped
    
    privileged: true
    
    networks:
      - secure-network
    
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock:ro
      - /proc:/host/proc:ro
      - /boot:/host/boot:ro
      - /lib/modules:/host/lib/modules:ro
      - /usr:/host/usr:ro
      - /etc:/host/etc:ro
      - ./security/falco/falco.yaml:/etc/falco/falco.yaml:ro
      - ./security/falco/rules:/etc/falco/rules.d:ro
      - falco-logs:/var/log/falco
    
    environment:
      - FALCO_HOSTNAME=online-time-host
      - FALCO_GRPC_ENABLED=true
      - FALCO_WEBSERVER_ENABLED=true
    
    profiles:
      - runtime-security

  # 网络IDS - Suricata
  suricata:
    image: jasonish/suricata:latest
    container_name: online-time-ids
    restart: unless-stopped
    
    network_mode: host
    
    volumes:
      - ./security/suricata:/etc/suricata:ro
      - suricata-logs:/var/log/suricata
      - suricata-run:/var/run/suricata
    
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE
    
    security_opt:
      - no-new-privileges:true
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    
    profiles:
      - network-security

networks:
  secure-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-secure
      com.docker.network.bridge.enable_icc: "false"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    ipam:
      config:
        - subnet: 172.28.0.0/24
          gateway: 172.28.0.1
    labels:
      - "security=high"
  
  dmz-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-dmz
    ipam:
      config:
        - subnet: 172.29.0.0/24
          gateway: 172.29.0.1
    labels:
      - "zone=dmz"

volumes:
  vault-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/vault
  
  waf-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/waf
  
  trivy-cache:
    driver: local
  
  falco-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/falco
  
  suricata-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs/suricata
  
  suricata-run:
    driver: local