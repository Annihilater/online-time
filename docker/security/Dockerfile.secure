# 安全强化的多阶段构建
# 使用特定版本以避免意外更新带来的安全风险
FROM node:18.20-alpine3.19 AS builder

# 安全元数据
LABEL maintainer="security@online-time.com"
LABEL security.scan="enabled"
LABEL security.baseline="cis-docker-1.6.0"

# 设置安全的环境变量
ENV NODE_ENV=production \
    NPM_CONFIG_LOGLEVEL=error \
    NPM_CONFIG_AUDIT_LEVEL=moderate

# 创建非root用户进行构建
RUN addgroup -g 1001 -S nodeuser && \
    adduser -S -D -H -u 1001 -G nodeuser nodeuser

# 设置工作目录
WORKDIR /app

# 复制package文件（使用特定权限）
COPY --chown=nodeuser:nodeuser package*.json ./

# 切换到非root用户
USER nodeuser

# 安装依赖并进行安全审计
RUN npm ci --only=production --silent && \
    npm audit fix --force 2>/dev/null || true && \
    npm cache clean --force

# 复制源代码
COPY --chown=nodeuser:nodeuser . .

# 构建应用
RUN npm run build && \
    # 删除不必要的文件
    rm -rf src/ node_modules/ .git/ .env* && \
    # 创建构建信息文件
    echo "{\"buildTime\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"nodeVersion\":\"$(node -v)\"}" > dist/build-info.json

# 生产阶段 - 使用distroless基础镜像以减少攻击面
FROM nginx:1.25.4-alpine3.18-slim AS production

# 安全元数据
LABEL maintainer="security@online-time.com"
LABEL security.scan="enabled"
LABEL security.baseline="cis-nginx-1.2.0"

# 安装必要的安全工具和更新
RUN apk update && \
    apk add --no-cache \
    curl \
    ca-certificates \
    tzdata && \
    # 删除不必要的包
    apk del --purge apk-tools && \
    # 清理缓存
    rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# 创建专用的nginx用户和组
RUN addgroup -g 1001 -S nginx 2>/dev/null || true && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx 2>/dev/null || true

# 创建必要的目录结构
RUN mkdir -p /var/cache/nginx /var/log/nginx /etc/nginx/conf.d /run/nginx && \
    # 设置严格的目录权限
    chmod 750 /var/cache/nginx /var/log/nginx && \
    chmod 755 /etc/nginx/conf.d

# 复制安全配置的nginx.conf
COPY --chown=root:root security/nginx-secure.conf /etc/nginx/nginx.conf
RUN chmod 644 /etc/nginx/nginx.conf

# 复制安全头部配置
COPY --chown=root:root security/security-headers.conf /etc/nginx/conf.d/security-headers.conf
RUN chmod 644 /etc/nginx/conf.d/security-headers.conf

# 从构建阶段复制构建产物
COPY --from=builder --chown=nginx:nginx /app/dist /usr/share/nginx/html

# 设置文件权限（只读）
RUN find /usr/share/nginx/html -type f -exec chmod 444 {} \; && \
    find /usr/share/nginx/html -type d -exec chmod 555 {} \;

# 设置目录所有权
RUN chown -R nginx:nginx /var/cache/nginx /var/log/nginx /run/nginx

# 创建健康检查脚本
RUN echo '#!/bin/sh\ncurl -f -s http://localhost/health || exit 1' > /usr/local/bin/healthcheck && \
    chmod 755 /usr/local/bin/healthcheck

# 删除默认nginx页面
RUN rm -rf /usr/share/nginx/html/index.html /usr/share/nginx/html/50x.html

# 暴露端口（只暴露必要端口）
EXPOSE 8080

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD /usr/local/bin/healthcheck

# 设置安全的运行时配置
USER 1001:1001

# 使用exec形式的CMD以正确处理信号
CMD ["nginx", "-g", "daemon off;"]