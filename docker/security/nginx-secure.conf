# 安全强化的Nginx配置
# 基于OWASP和CIS基准的最佳实践

# 以非root用户运行
user nginx nginx;

# 自动设置工作进程数
worker_processes auto;

# 错误日志配置
error_log /var/log/nginx/error.log warn;
pid /run/nginx/nginx.pid;

# 限制工作进程的文件描述符数量
worker_rlimit_nofile 65535;

events {
    # 每个工作进程的最大连接数
    worker_connections 2048;
    
    # 使用高效的连接处理方法
    use epoll;
    
    # 接受尽可能多的连接
    multi_accept on;
}

http {
    # 基本设置
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # 字符集
    charset utf-8;
    
    # 隐藏Nginx版本信息
    server_tokens off;
    more_clear_headers Server;
    
    # 日志格式（包含安全相关信息）
    log_format security '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       '$ssl_protocol $ssl_cipher';
    
    access_log /var/log/nginx/access.log security buffer=32k;
    
    # 性能优化
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    
    # 连接超时设置
    keepalive_timeout 30s;
    keepalive_requests 100;
    
    # 客户端请求限制
    client_body_timeout 10s;
    client_header_timeout 10s;
    send_timeout 10s;
    
    # 缓冲区大小限制（防止缓冲区溢出）
    client_body_buffer_size 1K;
    client_header_buffer_size 1k;
    client_max_body_size 1M;
    large_client_header_buffers 2 1k;
    
    # 限制请求速率（防止DoS攻击）
    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;
    
    # Gzip压缩（提高性能但要注意BREACH攻击）
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript 
               application/json application/javascript application/xml+rss 
               application/rss+xml application/atom+xml image/svg+xml 
               text/x-js text/x-cross-domain-policy application/x-font-ttf 
               application/x-font-opentype application/vnd.ms-fontobject 
               image/x-icon;
    gzip_disable "msie6";
    
    # 开放重定向保护
    map $http_referer $invalid_referer {
        default 0;
        "~*evil\.com" 1;
    }
    
    # SSL会话缓存（如果使用HTTPS）
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    
    # 包含额外的配置文件
    include /etc/nginx/conf.d/*.conf;
    
    # 主服务器配置
    server {
        listen 8080 default_server;
        listen [::]:8080 default_server;
        server_name _;
        
        # 文档根目录
        root /usr/share/nginx/html;
        index index.html;
        
        # 访问日志
        access_log /var/log/nginx/access.log security;
        error_log /var/log/nginx/error.log warn;
        
        # 限制请求方法
        if ($request_method !~ ^(GET|HEAD|POST|OPTIONS)$) {
            return 405;
        }
        
        # 应用请求速率限制
        limit_req zone=general burst=20 nodelay;
        limit_conn addr 10;
        
        # 防止点击劫持
        add_header X-Frame-Options "SAMEORIGIN" always;
        
        # 防止MIME类型混淆攻击
        add_header X-Content-Type-Options "nosniff" always;
        
        # 启用XSS保护
        add_header X-XSS-Protection "1; mode=block" always;
        
        # 引用策略
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # 权限策略
        add_header Permissions-Policy "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()" always;
        
        # 内容安全策略（CSP）
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; frame-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none'; upgrade-insecure-requests;" always;
        
        # 健康检查端点
        location /health {
            access_log off;
            default_type text/plain;
            return 200 "healthy\n";
        }
        
        # 主应用路由
        location / {
            # 尝试提供文件，如果不存在则返回index.html（SPA路由）
            try_files $uri $uri/ /index.html;
            
            # 缓存静态资源
            location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
                expires 30d;
                add_header Cache-Control "public, immutable";
                access_log off;
            }
        }
        
        # 阻止访问隐藏文件
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 阻止访问备份文件
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 阻止访问特定文件扩展名
        location ~* \.(bak|config|sql|fla|psd|ini|log|sh|inc|swp|dist)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # 自定义错误页面
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /403.html {
            internal;
            default_type text/html;
            return 403 "<html><body><h1>403 Forbidden</h1></body></html>";
        }
        
        location = /404.html {
            internal;
            default_type text/html;
            return 404 "<html><body><h1>404 Not Found</h1></body></html>";
        }
        
        location = /50x.html {
            internal;
            default_type text/html;
            return 500 "<html><body><h1>500 Internal Server Error</h1></body></html>";
        }
    }
    
    # 默认服务器（捕获所有未匹配的请求）
    server {
        listen 8080;
        listen [::]:8080;
        server_name "";
        return 444;
    }
}