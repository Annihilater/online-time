# 基础设施管理Makefile

# 默认变量
ENV ?= dev
COMPOSE_FILE = docker-compose.yml
MONITORING_FILE = docker-compose.monitoring.yml
HA_FILE = docker-compose.ha.yml
PROJECT_NAME = online-time

# 颜色输出
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[1;33m
BLUE = \033[0;34m
NC = \033[0m # No Color

# 帮助信息
.PHONY: help
help: ## 显示帮助信息
	@echo "基础设施管理工具"
	@echo "\n可用命令:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-20s\033[0m %s\n", $$1, $$2}'

# 环境管理
.PHONY: env-setup
env-setup: ## 设置环境配置
	@echo "$(BLUE)设置 $(ENV) 环境配置...$(NC)"
	@if [ ! -f "environments/$(ENV)/.env" ]; then \
		echo "$(RED)错误: 环境配置文件 environments/$(ENV)/.env 不存在$(NC)"; \
		exit 1; \
	fi
	@cp environments/$(ENV)/.env .env
	@echo "$(GREEN)环境配置已复制到 .env$(NC)"

.PHONY: env-validate
env-validate: ## 验证环境配置
	@echo "$(BLUE)验证环境配置...$(NC)"
	@if [ ! -f ".env" ]; then \
		echo "$(RED)错误: .env 文件不存在，请先运行 make env-setup$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)环境配置验证通过$(NC)"

# 监控管理
.PHONY: monitoring-up
monitoring-up: env-validate ## 启动监控服务
	@echo "$(BLUE)启动监控服务...$(NC)"
	@mkdir -p data/{prometheus,grafana,loki,alertmanager}
	@docker-compose -f $(MONITORING_FILE) up -d
	@echo "$(GREEN)监控服务已启动$(NC)"
	@echo "访问地址:"
	@echo "  Prometheus: http://localhost:9090"
	@echo "  Grafana: http://localhost:3000 (admin/admin123)"
	@echo "  AlertManager: http://localhost:9093"

.PHONY: monitoring-down
monitoring-down: ## 停止监控服务
	@echo "$(BLUE)停止监控服务...$(NC)"
	@docker-compose -f $(MONITORING_FILE) down
	@echo "$(GREEN)监控服务已停止$(NC)"

.PHONY: monitoring-logs
monitoring-logs: ## 查看监控服务日志
	@docker-compose -f $(MONITORING_FILE) logs -f

# 高可用性部署
.PHONY: ha-up
ha-up: env-validate ## 启动高可用性部署
	@echo "$(BLUE)启动高可用性部署...$(NC)"
	@mkdir -p data/{redis,backups}
	@docker-compose -f $(HA_FILE) up -d
	@echo "$(GREEN)高可用性服务已启动$(NC)"
	@echo "访问地址:"
	@echo "  应用: http://localhost"
	@echo "  HAProxy统计: http://localhost:8404/stats"

.PHONY: ha-down
ha-down: ## 停止高可用性部署
	@echo "$(BLUE)停止高可用性部署...$(NC)"
	@docker-compose -f $(HA_FILE) down
	@echo "$(GREEN)高可用性服务已停止$(NC)"

# 健康检查
.PHONY: health-check
health-check: ## 执行健康检查
	@echo "$(BLUE)执行健康检查...$(NC)"
	@chmod +x scripts/health/health-check.sh
	@./scripts/health/health-check.sh

.PHONY: health-monitor
health-monitor: ## 启动持续监控
	@echo "$(BLUE)启动持续监控...$(NC)"
	@chmod +x scripts/monitoring/monitor.sh
	@while true; do \
		./scripts/monitoring/monitor.sh; \
		sleep 300; \
	done

# 备份管理
.PHONY: backup
backup: ## 执行全量备份
	@echo "$(BLUE)执行全量备份...$(NC)"
	@chmod +x scripts/backup/backup.sh
	@./scripts/backup/backup.sh full

.PHONY: backup-config
backup-config: ## 备份配置文件
	@echo "$(BLUE)备份配置文件...$(NC)"
	@chmod +x scripts/backup/backup.sh
	@./scripts/backup/backup.sh config

.PHONY: backup-data
backup-data: ## 备份数据文件
	@echo "$(BLUE)备份数据文件...$(NC)"
	@chmod +x scripts/backup/backup.sh
	@./scripts/backup/backup.sh data

.PHONY: restore-list
restore-list: ## 列出可用备份
	@echo "$(BLUE)可用备份文件:$(NC)"
	@chmod +x scripts/backup/restore.sh
	@./scripts/backup/restore.sh list

# 日志管理
.PHONY: logs
logs: ## 查看所有服务日志
	@docker-compose -f $(COMPOSE_FILE) logs -f

.PHONY: logs-app
logs-app: ## 查看应用日志
	@docker-compose -f $(COMPOSE_FILE) logs -f online-time-app

.PHONY: logs-cleanup
logs-cleanup: ## 清理过期日志
	@echo "$(BLUE)清理过期日志...$(NC)"
	@chmod +x scripts/monitoring/monitor.sh
	@./scripts/monitoring/monitor.sh cleanup 7
	@docker system prune -f --volumes --filter "until=168h"
	@echo "$(GREEN)日志清理完成$(NC)"

# 系统管理
.PHONY: system-info
system-info: ## 显示系统信息
	@echo "$(BLUE)系统信息:$(NC)"
	@echo "Docker版本: $(shell docker --version)"
	@echo "Docker Compose版本: $(shell docker-compose --version)"
	@echo "容器状态:"
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
	@echo "磁盘使用:"
	@df -h
	@echo "内存使用:"
	@free -h

.PHONY: system-cleanup
system-cleanup: ## 清理系统资源
	@echo "$(YELLOW)清理系统资源...$(NC)"
	@docker system prune -af --volumes
	@docker volume prune -f
	@docker network prune -f
	@echo "$(GREEN)系统资源清理完成$(NC)"

# 安全管理
.PHONY: security-scan
security-scan: ## 执行安全扫描
	@echo "$(BLUE)执行安全扫描...$(NC)"
	@if command -v docker-bench-security >/dev/null 2>&1; then \
		docker run --rm -it --net host --pid host --userns host --cap-add audit_control \
		-e DOCKER_CONTENT_TRUST=$$DOCKER_CONTENT_TRUST \
		-v /var/lib:/var/lib:ro \
		-v /var/run/docker.sock:/var/run/docker.sock:ro \
		-v /usr/lib/systemd:/usr/lib/systemd:ro \
		-v /etc:/etc:ro --label docker_bench_security \
		docker/docker-bench-security; \
	else \
		echo "$(YELLOW)docker-bench-security 未安装，跳过安全扫描$(NC)"; \
	fi

.PHONY: update-passwords
update-passwords: ## 更新默认密码
	@echo "$(YELLOW)请手动更新以下默认密码:$(NC)"
	@echo "1. Redis密码: environments/*/env 中的 REDIS_PASSWORD"
	@echo "2. Grafana管理员密码: monitoring/grafana 环境变量"
	@echo "3. 告警通知webhook地址: environments/*/env 中的 ALERT_WEBHOOK_URL"

# 性能优化
.PHONY: optimize
optimize: ## 系统性能优化
	@echo "$(BLUE)执行系统性能优化...$(NC)"
	@# 优化Docker镜像
	@docker image prune -f
	@# 优化日志轮转
	@find logs/ -name "*.log" -size +50M -exec gzip {} \;
	@# 清理临时文件
	@find /tmp -name "*online-time*" -mtime +1 -delete 2>/dev/null || true
	@echo "$(GREEN)系统优化完成$(NC)"

# 一键部署
.PHONY: deploy-dev
deploy-dev: env-setup monitoring-up ## 部署开发环境
	@echo "$(GREEN)开发环境部署完成$(NC)"

.PHONY: deploy-prod
deploy-prod: ## 部署生产环境
	@$(MAKE) ENV=prod env-setup
	@$(MAKE) ha-up
	@$(MAKE) monitoring-up
	@echo "$(GREEN)生产环境部署完成$(NC)"

# 维护任务
.PHONY: maintenance
maintenance: backup logs-cleanup system-cleanup optimize ## 执行维护任务
	@echo "$(GREEN)维护任务完成$(NC)"

.PHONY: status
status: ## 显示服务状态
	@echo "$(BLUE)服务状态:$(NC)"
	@docker-compose -f $(COMPOSE_FILE) ps
	@echo ""
	@echo "$(BLUE)健康检查:$(NC)"
	@$(MAKE) health-check

# 默认目标
.DEFAULT_GOAL := help