# 安全操作Makefile
# 提供安全相关的自动化命令

.PHONY: help audit scan deploy-secure ssl vault waf monitor clean-security

# 默认目标
help:
	@echo "Online Time Security Management"
	@echo "================================"
	@echo ""
	@echo "Available commands:"
	@echo "  make audit          - Run full security audit"
	@echo "  make scan           - Scan for vulnerabilities"
	@echo "  make deploy-secure  - Deploy with security hardening"
	@echo "  make ssl            - Generate SSL certificates"
	@echo "  make vault          - Initialize secret management"
	@echo "  make waf            - Deploy WAF protection"
	@echo "  make monitor        - Start security monitoring"
	@echo "  make test-security  - Run security tests"
	@echo "  make clean-security - Clean security artifacts"
	@echo ""
	@echo "Quick start:"
	@echo "  make deploy-secure  - Full secure deployment"
	@echo ""

# 运行完整安全审计
audit:
	@echo "🔍 Running security audit..."
	@chmod +x ./security/security-audit.sh
	@./security/security-audit.sh
	@echo "✅ Audit complete. Check ./security/reports/ for results"

# 扫描漏洞
scan:
	@echo "🔍 Scanning for vulnerabilities..."
	@echo "→ Scanning Docker images..."
	@docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
		aquasec/trivy image online-time:secure || true
	@echo "→ Scanning dependencies..."
	@npm audit --production || true
	@echo "→ Scanning source code..."
	@docker run --rm -v $(PWD):/src \
		securego/gosec -fmt json -out /src/security/reports/gosec-report.json /src/... 2>/dev/null || true
	@echo "✅ Vulnerability scan complete"

# 安全部署
deploy-secure: ssl
	@echo "🚀 Deploying with security hardening..."
	@echo "→ Building secure image..."
	@docker build -f security/Dockerfile.secure -t online-time:secure .
	@echo "→ Starting secure containers..."
	@docker-compose -f security/docker-compose.secure.yml up -d
	@echo "→ Waiting for services to start..."
	@sleep 10
	@echo "→ Running health checks..."
	@docker-compose -f security/docker-compose.secure.yml ps
	@echo "✅ Secure deployment complete"
	@echo "Access the application at: https://localhost"

# 生成SSL证书
ssl:
	@echo "🔐 Generating SSL certificates..."
	@chmod +x ./security/ssl/generate-ssl.sh
	@./security/ssl/generate-ssl.sh localhost dev
	@echo "✅ SSL certificates generated"

# 生产SSL证书
ssl-prod:
	@echo "🔐 Setting up production SSL..."
	@read -p "Enter your domain: " domain; \
	./security/ssl/generate-ssl.sh $$domain production
	@echo "✅ Production SSL configured"

# 初始化Vault
vault:
	@echo "🗝️ Initializing secret management..."
	@docker-compose -f security/docker-compose.secure.yml --profile secrets up -d vault
	@sleep 5
	@chmod +x ./security/vault/init-vault.sh
	@./security/vault/init-vault.sh
	@echo "✅ Vault initialized"

# 部署WAF
waf:
	@echo "🛡️ Deploying Web Application Firewall..."
	@docker-compose -f security/docker-compose.secure.yml up -d waf
	@echo "→ WAF is running on port 80/443"
	@echo "✅ WAF deployed"

# 启动安全监控
monitor:
	@echo "📊 Starting security monitoring..."
	@docker-compose -f security/docker-compose.secure.yml --profile runtime-security up -d
	@echo "→ Falco runtime security: Active"
	@echo "→ Prometheus metrics: http://localhost:9090"
	@echo "→ Grafana dashboards: http://localhost:3000"
	@echo "✅ Security monitoring active"

# 运行安全测试
test-security:
	@echo "🧪 Running security tests..."
	@echo "→ Testing SSL configuration..."
	@openssl s_client -connect localhost:443 -tls1_2 2>/dev/null | grep "Cipher" || echo "SSL test needs HTTPS enabled"
	@echo "→ Testing security headers..."
	@curl -I -s https://localhost | grep -E "X-Frame-Options|X-Content-Type|Strict-Transport" || echo "Headers test needs HTTPS enabled"
	@echo "→ Testing WAF..."
	@curl -s "http://localhost/?test=<script>alert(1)</script>" | grep -q "403" && echo "✓ XSS blocked" || echo "✗ XSS not blocked"
	@curl -s "http://localhost/?id=1' OR '1'='1" | grep -q "403" && echo "✓ SQLi blocked" || echo "✗ SQLi not blocked"
	@echo "✅ Security tests complete"

# 应急响应
incident-response:
	@echo "🚨 Initiating incident response..."
	@echo "→ Capturing current state..."
	@docker-compose -f security/docker-compose.secure.yml logs > ./security/reports/incident-$(shell date +%Y%m%d-%H%M%S).log
	@echo "→ Listing running containers..."
	@docker ps -a
	@echo "→ Checking for suspicious processes..."
	@docker-compose -f security/docker-compose.secure.yml exec online-time-app ps aux || true
	@echo "→ Backing up data..."
	@tar -czf ./security/reports/backup-$(shell date +%Y%m%d-%H%M%S).tar.gz ./data/
	@echo "✅ Incident data collected"

# 更新安全组件
update-security:
	@echo "🔄 Updating security components..."
	@echo "→ Updating WAF rules..."
	@docker pull owasp/modsecurity-crs:nginx-alpine
	@echo "→ Updating vulnerability scanner..."
	@docker pull aquasec/trivy:latest
	@echo "→ Updating npm packages..."
	@npm audit fix --force || true
	@echo "✅ Security components updated"

# 生成安全报告
report:
	@echo "📋 Generating security report..."
	@mkdir -p ./security/reports
	@echo "# Security Report - $(shell date +%Y-%m-%d)" > ./security/reports/report-$(shell date +%Y%m%d).md
	@echo "" >> ./security/reports/report-$(shell date +%Y%m%d).md
	@echo "## Container Security" >> ./security/reports/report-$(shell date +%Y%m%d).md
	@docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" >> ./security/reports/report-$(shell date +%Y%m%d).md
	@echo "" >> ./security/reports/report-$(shell date +%Y%m%d).md
	@echo "## Recent Security Events" >> ./security/reports/report-$(shell date +%Y%m%d).md
	@tail -n 20 ./logs/waf/access.log 2>/dev/null >> ./security/reports/report-$(shell date +%Y%m%d).md || echo "No WAF logs available" >> ./security/reports/report-$(shell date +%Y%m%d).md
	@echo "✅ Report generated: ./security/reports/report-$(shell date +%Y%m%d).md"

# 备份安全配置
backup-security:
	@echo "💾 Backing up security configuration..."
	@tar -czf ./security/backups/security-backup-$(shell date +%Y%m%d-%H%M%S).tar.gz \
		./security/*.conf \
		./security/*.yml \
		./security/vault/.vault-token \
		./security/ssl/certs/ \
		./security/ssl/private/ 2>/dev/null || true
	@echo "✅ Security backup complete"

# 清理安全组件
clean-security:
	@echo "🧹 Cleaning security artifacts..."
	@docker-compose -f security/docker-compose.secure.yml down -v
	@rm -rf ./security/reports/*.json ./security/reports/*.txt
	@rm -rf ./security/scan-results/
	@rm -rf ./logs/waf/ ./logs/falco/ ./logs/suricata/
	@echo "✅ Security artifacts cleaned"

# 停止所有安全服务
stop-security:
	@echo "⏹️ Stopping security services..."
	@docker-compose -f security/docker-compose.secure.yml down
	@echo "✅ Security services stopped"

# 查看安全日志
logs-security:
	@echo "📜 Security logs (last 50 lines):"
	@echo "─────────────────────────────────"
	@docker-compose -f security/docker-compose.secure.yml logs --tail=50

# 检查安全状态
status-security:
	@echo "📊 Security Status"
	@echo "═════════════════════════════════"
	@echo "Container Status:"
	@docker-compose -f security/docker-compose.secure.yml ps
	@echo ""
	@echo "Security Checks:"
	@[ -f ./security/ssl/certs/localhost.crt ] && echo "✅ SSL Certificate: Present" || echo "❌ SSL Certificate: Missing"
	@docker ps | grep -q waf && echo "✅ WAF: Running" || echo "❌ WAF: Not running"
	@docker ps | grep -q vault && echo "✅ Vault: Running" || echo "❌ Vault: Not running"
	@docker ps | grep -q falco && echo "✅ Runtime Security: Active" || echo "⚠️ Runtime Security: Inactive"
	@echo ""
	@echo "Last Audit:"
	@ls -lt ./security/reports/security-audit-*.md 2>/dev/null | head -1 || echo "No audit reports found"

# 快速安全检查
quick-check:
	@echo "⚡ Quick Security Check"
	@echo "══════════════════════"
	@echo "→ Checking for exposed secrets..."
	@! grep -r "password\|secret\|token\|key" --include="*.env" . 2>/dev/null || echo "⚠️ Potential secrets exposed!"
	@echo "→ Checking Docker security..."
	@docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
	@echo "→ Checking open ports..."
	@netstat -tuln | grep LISTEN || ss -tuln | grep LISTEN || echo "Port check requires admin privileges"
	@echo "✅ Quick check complete"

# 一键部署（开发环境）
dev-secure:
	@echo "🚀 Deploying secure development environment..."
	@make ssl
	@make deploy-secure
	@make monitor
	@make status-security
	@echo "✅ Secure development environment ready!"
	@echo "Access: https://localhost:8080"

# 一键部署（生产环境）
prod-secure:
	@echo "🚀 Deploying secure production environment..."
	@make ssl-prod
	@make vault
	@make waf
	@make deploy-secure
	@make monitor
	@make audit
	@echo "✅ Secure production environment ready!"

.SILENT: help status-security